<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docs on  Roger&#39;s Blog</title>
    <link>https://cryptocode.github.io/blog/docs/</link>
    <description>Recent content in Docs on  Roger&#39;s Blog</description>
    <image>
      <title> Roger&#39;s Blog</title>
      <url>https://cryptocode.github.io/blog/images/mondrian.png</url>
      <link>https://cryptocode.github.io/blog/images/mondrian.png</link>
    </image>
    <generator>Hugo -- 0.115.1</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Jul 2023 12:01:51 +0200</lastBuildDate>
    <atom:link href="https://cryptocode.github.io/blog/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Embedding machine code in Zig instead of using inline assembly</title>
      <link>https://cryptocode.github.io/blog/docs/machinecode/</link>
      <pubDate>Sat, 29 Jul 2023 12:01:51 +0200</pubDate>
      <guid>https://cryptocode.github.io/blog/docs/machinecode/</guid>
      <description>Object files vs. raw machine code Assembling Calling from Zig A larger example with fast memcpy and syscalls Zig supports inline assembly, which is useful when:
Writing an operating system, which requires direct access to special CPU registers and controllers Implementing syscalls in standard libraries Accessing microcontroller features on embedded systems Handwriting a performance-critical hot-path function where the optimizer doesn&amp;rsquo;t do the right thing Inline assembly, however, can quickly get unwieldy, and getting the input/output constraints right can be tricky.</description>
    </item>
    <item>
      <title>Cache Me If You Can</title>
      <link>https://cryptocode.github.io/blog/docs/falsesharing/</link>
      <pubDate>Sun, 09 Jul 2023 10:00:00 +0200</pubDate>
      <guid>https://cryptocode.github.io/blog/docs/falsesharing/</guid>
      <description>&lt;div style=&#34;font-size: small;&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#cache-lines&#34;&gt;Cache lines&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#a-little-zig-surprise&#34;&gt;A little Zig surprise&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#the-code&#34;&gt;The code&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#the-numbers&#34;&gt;The numbers&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#hyperthreading-adds-a-twist&#34;&gt;Hyperthreading adds a twist&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#cache-topology&#34;&gt;Cache topology&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;
&lt;p&gt;How come making a struct in Zig &lt;em&gt;less&lt;/em&gt; densely packed can give a 56% performance increase, with far less variability? This post takes a look at false sharing and how it can be caused by packed data layouts and unintended field reorderings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Async CPU bound workers in Zig</title>
      <link>https://cryptocode.github.io/blog/docs/async/</link>
      <pubDate>Sun, 02 May 2021 10:00:00 +0200</pubDate>
      <guid>https://cryptocode.github.io/blog/docs/async/</guid>
      <description>Zig has async/await support, which is typically used for IO bound operations.
In this article, however, we&amp;rsquo;ll use async/await to simplify writing a simple concurrent worker.
Goal: use all the cores on the machine to find a randomly selected 64-bit number whose lower N bits are all cleared.
How it works Instead of manually spinning up threads, we&amp;rsquo;re just going to use async/await, along with pub const io_mode = .evented; which informs the standard library to use a non-blocking event loop.</description>
    </item>
    <item>
      <title>Bio - All your parentheses are belong to us</title>
      <link>https://cryptocode.github.io/blog/docs/bio-introduction/</link>
      <pubDate>Sun, 25 Apr 2021 10:00:00 +0200</pubDate>
      <guid>https://cryptocode.github.io/blog/docs/bio-introduction/</guid>
      <description>A little Lisp written in Zig</description>
    </item>
    <item>
      <title>Some notes on using Zig with Valgrind</title>
      <link>https://cryptocode.github.io/blog/docs/valgrind-zig/</link>
      <pubDate>Sun, 25 Apr 2021 09:00:00 +0200</pubDate>
      <guid>https://cryptocode.github.io/blog/docs/valgrind-zig/</guid>
      <description>Zig has a very nice built-in memory leak detector in its General Purpose Allocator (GPA), but sometimes you have to break out Valgrind to get to the bottom of things.
When I first did this, I ran into a couple of problems, which I&amp;rsquo;m jotting down here along with solutions.
Thanks to mikdusan, ifreund and lemonboy for helping me figure out various issues
First of all, to get Valgrind going with Zig programs, you&amp;rsquo;ll have to switch to the C allocator.</description>
    </item>
    <item>
      <title>Zig scripts?!?</title>
      <link>https://cryptocode.github.io/blog/docs/shebang/</link>
      <pubDate>Sat, 24 Apr 2021 10:00:00 +0200</pubDate>
      <guid>https://cryptocode.github.io/blog/docs/shebang/</guid>
      <description>Look at this beauty:
//usr/bin/env zig run &amp;#34;$0&amp;#34; -- &amp;#34;$@&amp;#34; ; exit const std = @import(&amp;#34;std&amp;#34;); pub fn main() !void { std.log.info(&amp;#34;Awesome, it works\n&amp;#34;, .{}); } Let&amp;rsquo;s make it executable and run it:
chmod +x myscript.zig ./myscript.zig info: Awesome, it works This works because // is a comment in Zig, and just an empty path component as far as the shell is concerned
Thanks to squirl for making the argument passing syntax more robus</description>
    </item>
    <item>
      <title>A surprisingly capable RPN calculator in about 100 lines of Zig code</title>
      <link>https://cryptocode.github.io/blog/docs/prefix-calculator/</link>
      <pubDate>Mon, 01 Mar 2021 10:00:00 +0200</pubDate>
      <guid>https://cryptocode.github.io/blog/docs/prefix-calculator/</guid>
      <description>Summary:
Reverse polish notation is awesome Zig is awesome Before solving quadratic equations and diving into code, let&amp;rsquo;s see if 2 + 2 is still 4:
2 2 + M0 = 4 Phew! Notice how every answer is placed in the next available memory slot. This will be useful in our next example where we calculate the two solutions to a quadratic equation:
First we input the known values so these get memory slots we can reference, rather than repeating the constants.</description>
    </item>
    <item>
      <title>Running Zig binaries on a KaiOS device</title>
      <link>https://cryptocode.github.io/blog/docs/kaios/</link>
      <pubDate>Wed, 27 Jan 2021 10:00:00 +0200</pubDate>
      <guid>https://cryptocode.github.io/blog/docs/kaios/</guid>
      <description>The goal here is to:
Cross-compile a Zig program Root a KaiOS device, and then install and run the cross-compiled program on the device We&amp;rsquo;re not making a GUI app or anything here, just a small &amp;ldquo;Hello world&amp;rdquo; program that we&amp;rsquo;ll cross-compile and run on the device. All sorts of interesting things can be done from this point on.
I&amp;rsquo;m using Android&amp;rsquo;s adb to push files to the device and to get a shell, so you&amp;rsquo;ll have to install that first if you wanna follow along.</description>
    </item>
  </channel>
</rss>
